@{
    ViewBag.Title = "Index";
}

<h2>Gestion des amitiés</h2>

<hr />
<div>
    <!-- SEARCH SECTION -->
  
    <div>

        <input type="text" id="targetNameInput" placeholder="Entrez un nom...">
        <i class="fa-solid fa-fw fa-search" onclick="updateSearch()"></i>
    </div>
  

    <label><input type="checkbox" id="showOthersCheckbox"><i class="fa-solid fa-fw fa-plus-circle"></i></label>
    <label><input type="checkbox" id="showReceivedCheckbox"><i class="fa-solid fa-fw fa-check"></i></label>
    <label><input type="checkbox" id="showFriendsCheckbox"><i class="fa-solid fa-fw fa-circle-check"></i></label>
    <label><input type="checkbox" id="showSentCheckbox"><i class="fa-solid fa-fw fa-hourglass-start"></i></label>
    <label><input type="checkbox" id="showDeclinedCheckbox"><i class="fa fa-fw fa-times-circle"></i></label>
    <label><input type="checkbox" id="showBlockedCheckbox"><i class="fa-solid fa-fw fa-ban"></i></label>
</div>

<hr />

<div>
    <div id="RelationsRefreshContainer"><!-- REFRESH CONTAINER --></div>
</div>

@section Scripts {
    <script defer>
        function updateSearch() {
           
            let targetName = document.getElementById("targetNameInput").value;

            if (targetName.trim().length == 0)
                targetName = undefined;
  
            let showOthers = document.getElementById("showOthersCheckbox").checked;
            let showReceived = document.getElementById("showReceivedCheckbox").checked;
            let showFriends = document.getElementById("showFriendsCheckbox").checked;
            let showSent = document.getElementById("showSentCheckbox").checked;
            let showDeclined = document.getElementById("showDeclinedCheckbox").checked;
            let showBlockeds = document.getElementById("showBlockedCheckbox").checked;
        
            relations.replaceData({
                showOthers: showOthers,
                showReceived: showReceived,
                showFriends: showFriends,
                showSent: showSent,
                showDeclined: showDeclined,
                showBlocked: showBlockeds,
                targetName: targetName
            });
            relations.refresh(true);
        }

        function sendFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("CreateRequest")", {
                targetUserId: targetUserId
            });
        };

        function cancelFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("CancelRequest")", {
                targetUserId: targetUserId
            });
        };

        function acceptFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("AcceptRequest")", {
                targetUserId: targetUserId,
                isAccepting: true
            });
        };

        function declineFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("AcceptRequest")", {
                targetUserId: targetUserId,
                isAccepting: false
            });
        };

        // --- PARTIAL REFRESH ---
        function getTargetUserId(elem) {
            return elem.closest('.relation-parent').attr('data-id');
        }

        let onRefresh = function () {
            $(".canSend").click(function () {
                sendFriendRequest(getTargetUserId($(this)));
            });

            $(".accept-pending").click(function () {
                acceptFriendRequest(getTargetUserId($(this)));
            });

            $(".deny-pending").click(function () {
                declineFriendRequest(getTargetUserId($(this)));
            });

            $(".cancel-pending").click(function () {
                cancelFriendRequest(getTargetUserId($(this)));
            });
        };

        let relations = new PartialRefresh("@Url.Action("GetRelations")", "RelationsRefreshContainer", 20, onRefresh, false);
        // ---

        search();

        //initTimeout(120);
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/Content/RelationStyles.css" />
}