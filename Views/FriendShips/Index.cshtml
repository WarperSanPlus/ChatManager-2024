@{
    ViewBag.Title = "Index";
}

<h2>Gestion des amitiés</h2>

<hr />

<div>
    <!-- SEARCH SECTION -->
    <div>

        <input type="text" id="targetNameInput" placeholder="Entrez un nom à rechercher" oninput="updateSearch('targetName', this.value)">
        <i class="fa-solid fa-fw fa-search"></i>

    </div>
        <label><input type="checkbox" onchange="updateSearch('showOthers', this.checked)"><i class="fa-solid fa-fw fa-plus-circle canSend"></i></label>
        <label><input type="checkbox" onchange="updateSearch('showReceived', this.checked)"><i class="fa-solid fa-fw fa-check accept-pending"></i></label>
        <label><input type="checkbox" onchange="updateSearch('showFriends', this.checked)"><i class="fa-solid fa-fw fa-circle-check accepted"></i></label>
        <label><input type="checkbox" onchange="updateSearch('showSent', this.checked)"><i class="fa-solid fa-fw fa-hourglass-start pending"></i></label>
        <label><input type="checkbox" onchange="updateSearch('showDeclined', this.checked)"><i class="fa fa-fw fa-times-circle denied"></i></label>
        <label><input type="checkbox" onchange="updateSearch('showBlocked', this.checked)"><i class="fa-solid fa-fw fa-ban blocked"></i></label>

    </div>

<hr />

<div>
    <div id="RelationsRefreshContainer"><!-- REFRESH CONTAINER --></div>
</div>

@section Scripts {
    <script defer>
        function updateSearch(paramName, isChecked) {
            let name = undefined;
            let params = {
                showFriends: false,
                showOthers: false,
                showReceived: false,
                showSent: false,
                showDeclined: false,
                showBlocked: false,
                targetName: name
            };

            // Mettre à jour le paramètre correspondant en fonction de la case cochée ou décochée
            params[paramName] = isChecked;

            relations.replaceData(params);
            relations.refresh(true);
        }

        function sendFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("CreateRequest")", {
                targetUserId: targetUserId
            });
        };

        function cancelFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("CancelRequest")", {
                targetUserId: targetUserId
            });
        };

        function acceptFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("AcceptRequest")", {
                targetUserId: targetUserId,
                isAccepting: true
            });
        };

        function declineFriendRequest(targetUserId) {
            relations.commandPost("@Url.Action("AcceptRequest")", {
                targetUserId: targetUserId,
                isAccepting: false
            });
        };

        // --- PARTIAL REFRESH ---
        function getTargetUserId(elem) {
            return elem.closest('.relation-parent').attr('data-id');
        }

        let onRefresh = function () {
            $(".canSend").click(function () {
                sendFriendRequest(getTargetUserId($(this)));
            });

            $(".accept-pending").click(function () {
                acceptFriendRequest(getTargetUserId($(this)));
            });

            $(".deny-pending").click(function () {
                declineFriendRequest(getTargetUserId($(this)));
            });

            $(".cancel-pending").click(function () {
                cancelFriendRequest(getTargetUserId($(this)));
            });
        };

        let relations = new PartialRefresh("@Url.Action("GetRelations")", "RelationsRefreshContainer", 20, onRefresh, false);
        // ---

        search();

        //initTimeout(120);
    </script>
}

@section Styles {
    <link rel="stylesheet" href="~/Content/RelationStyles.css" />
}