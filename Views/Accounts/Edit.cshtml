@model Models.User

@{
    ViewBag.Title = "Profil";
    bool subscribing = Model.Id == 0;
    string pageTitle = subscribing ? "Inscription" : "Profil";
    string formSubmitCaption = subscribing ? "S'inscrire" : "Enregistrer";
    SelectList liste =  new SelectList(Repositories.DB.GetRepo<Models.UserType>().ToList());
    bool verifier = Model.Verified;
    bool bloquer = Model.Blocked;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="formLayout">

    <fieldset>
        <div class="legend">Identification</div>
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.FirstName) } })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        <br />
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.LastName) } })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </fieldset>

    <fieldset>
        <div class="legend">@Html.DisplayNameFor(model => model.Email)</div>
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Email) } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        <br />
        @Html.EditorFor(model => model.ConfirmEmail, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmEmail) } })
        @Html.ValidationMessageFor(model => model.ConfirmEmail, "", new { @class = "text-danger" })
    </fieldset>
    <fieldset>
        <div class="legend">@Html.DisplayNameFor(model => model.UserType)</div>
        @Html.RadioButtonsGroupFor(model => model.UserType, liste)
        @Html.ValidationMessageFor(model => model.UserType, "", new { @class = "text-danger" })
    </fieldset>
    <fieldset>
        <div style="display:grid; align-items:center; grid-template-columns:auto 80px;">
            <div class="legend">
                @Html.DisplayNameFor(model => model.UserType)
            </div>
            <div>

                <label for="Verifié">Verifié</label>
                <input type="checkbox" name="Verifié" id="verif" value="@verifier" style="margin-top:-5px;" />
                <label for="Bloqué">Bloqué</label>
                <input type="checkbox" name="Bloqué" id="bloque" value="on" style="margin-top:-5px;" />

            </div>
        </div>
       
      
    </fieldset>
    <fieldset>
        <div class="legend">@Html.DisplayNameFor(model => model.Avatar)</div>
        @Helper.ImageUploader("Avatar", Model.Avatar, "Cliquez pour choisir votre avatar")
        @Html.ValidationMessageFor(model => model.Avatar, "", new { @class = "text-danger" })
    </fieldset>



    <input type="submit" value="@formSubmitCaption" class="btn btn-default" />
    <hr />
    <a href="@((string)Session["LastAction"])">Retour</a>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script defer>
        initTimeout(300);

        var unchangedPasswordCode = '@((string)Session["UnchangedPasswordCode"])';
        var showPassword = false;
        setUnchangedPassword();
        $("#ConfirmEmail").val($("#Email").val());
        $.validator.addMethod(
            "GenderId",
            function (value, element) { return ($("input[name='GenderId']:checked").val() != undefined); },
            "Choix obligatoire"
        );

        function setUnchangedPassword() {
            $("#Password").val(unchangedPasswordCode);
            $("#ConfirmPassword").val(unchangedPasswordCode);
            $("#Password").prop("readonly", true);
            $("#ConfirmPassword").prop("readonly", true);
            $("#toggleShowPassword").hide();
            $("#Password").attr("type", 'password');
            $("#ConfirmPassword").attr("type", 'password');
        }
        function resetPassword() {
            $("#Password").prop("readonly", false);
            $("#ConfirmPassword").prop("readonly", false);
            $("#Password").val('');
            $("#ConfirmPassword").val('');
            $("#toggleShowPassword").hide();
            $("#toggleShowPassword").removeClass("fa-eye");
            $("#toggleShowPassword").addClass("fa-eye-slash");
            showPassword = false;
        }

        function toggleShowPassword() {
            showPassword = !showPassword;
            if (showPassword) {
                $("#Password").attr("type", 'text');
                $("#ConfirmPassword").attr("type", 'text');
                $("#toggleShowPassword").addClass("fa-eye");
                $("#toggleShowPassword").removeClass("fa-eye-slash");
            } else {
                $("#Password").attr("type", 'password');
                $("#ConfirmPassword").attr("type", 'password');
                $("#toggleShowPassword").removeClass("fa-eye");
                $("#toggleShowPassword").addClass("fa-eye-slash");
            }
        }

        $("#changePassword").change(function () {
            if (!this.checked)
                setUnchangedPassword()
            else
                resetPassword()
        });

        $("#toggleShowPassword").hide();
        $("#toggleShowPassword").click(() => { toggleShowPassword(); });
        $("#Password").keyup(() => {
            if ($("#Password").val() == "")
                $("#toggleShowPassword").hide();
            else {
                if ($("#changePassword").is(':checked'))
                    $("#toggleShowPassword").show();
            }
        })
    </script>
}